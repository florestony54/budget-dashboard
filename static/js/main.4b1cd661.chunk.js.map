{"version":3,"sources":["server/data.js","components/IconCard/IconCard.js","components/LineChart/LineChart.js","components/PieChart/PieChart.js","components/RadarChart/RadarChart.js","components/ScatterPlot/ScatterPlot.js","components/NumberPanel/NumberPanel.js","components/BarChart/BarChart.js","components/DoughnutChart/DoughnutChart.js","components/Panel/Panel.js","components/NumberHeader/NumberHeader.js","components/MainPanel/MainPanel.js","App.js","serviceWorker.js","index.js"],"names":["IconCard","props","state","icon","this","setState","faMoneyBillAlt","faHandHoldingUsd","faWallet","faCoins","faChartLine","className","id","size","React","Component","LineChart","data","one","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","title","display","text","fontSize","fontColor","legend","position","two","dataset","PieChart","hoverBackgroundColor","ScatterPlot","fill","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","x","y","NumberPanel","type","number","BarChart","hoverBorderColor","i","push","Math","floor","random","DoughnutChart","Panel","chart","numType","NumberHeader","style","role","parseInt","MainPanel","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b1cd661.chunk.js","sourcesContent":["// var util = require('util');\r\n// var yf = require('yahoo-finance');\r\n\r\n// var SYMBOL = 'AAPL';\r\n\r\n// yf.historical({\r\n//   symbol: SYMBOL,\r\n//   from: '2012-01-01',\r\n//   to: '2012-12-31',\r\n//   period: 'd'\r\n// }, function (err, quotes) {\r\n//   if (err) { throw err; }\r\n//   console.log(util.format(\r\n//     '=== %s (%d) ===',\r\n//     SYMBOL,\r\n//     quotes.length\r\n//   ).cyan);\r\n//   if (quotes[0]) {\r\n//     console.log(\r\n//       '%s\\n...\\n%s',\r\n//       JSON.stringify(quotes[0], null, 2),\r\n//       JSON.stringify(quotes[quotes.length - 1], null, 2)\r\n//     );\r\n//   } else {\r\n//     console.log('N/A');\r\n//   }\r\n// });\r\nvar data = [];\r\n\r\nfor (let i = 0; i < 6; i++){\r\n     data.push(Math.floor(Math.random() * 1000) + 1)\r\n    }\r\n\r\nexport default data;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMoneyBillAlt, \r\n        faHandHoldingUsd, \r\n        faWallet,\r\n        faCoins,\r\n        faChartLine} from '@fortawesome/free-solid-svg-icons';\r\nimport './icon-card.css';\r\n\r\nclass IconCard extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            icon: null,\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        switch (this.props.icon) {\r\n            case 0:\r\n                this.setState({icon: faMoneyBillAlt})\r\n                break;\r\n            case 1:\r\n                this.setState({icon: faHandHoldingUsd})\r\n                break;\r\n            case 2:\r\n                this.setState({icon: faWallet})\r\n                break;\r\n            case 3:\r\n                this.setState({icon: faCoins})\r\n                break;\r\n            case 4:\r\n                this.setState({icon: faChartLine})\r\n                break;\r\n            case 5:\r\n                this.setState({icon: null})\r\n                break;\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='card bg-success col-3' id='icon-card'>\r\n                <FontAwesomeIcon icon={this.state.icon} size='2x'/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IconCard;","import {Line} from 'react-chartjs-2';\r\nimport React from 'react';\r\nimport IconCard from '../IconCard/IconCard';\r\n\r\nclass LineChart extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                one:{\r\n                    labels: ['2/1', '2/2', '2/3',\r\n                            '2/4', '2/5', '2/6', '2/7', '2/8'],\r\n                    datasets: \r\n                        [{\r\n                        label: 'Funds ($)',\r\n                        backgroundColor: 'rgba(135, 15, 255, 0.2)',\r\n                        borderColor: 'rgba(135, 15, 255, 1)',\r\n                        borderWidth: 2,\r\n                        data: [1185, 1040, 995, 965, 1450, 1370, 1370, 1295]\r\n                        }],\r\n                        options: {\r\n                            title:{\r\n                                display:true,\r\n                                text:'Total Available Funds',\r\n                                fontSize:20,\r\n                                fontColor: 'white'\r\n                            },\r\n                            legend:{\r\n                                labels: {\r\n                                    fontColor: 'white'\r\n                                },\r\n                                display:false,\r\n                                position:'right'\r\n                            },\r\n                           \r\n                        }\r\n                    },\r\n                two:{\r\n                    labels: ['2/1', '2/2', '2/3',\r\n                        '2/4', '2/5', '2/6', '2/7', '2/8'],\r\n                    datasets: [{\r\n                        label: 'Savings ($)',\r\n                        backgroundColor: 'rgb(82, 248, 91, 0.2)',\r\n                        borderColor: 'rgb(82, 248, 91, 1)',\r\n                        borderWidth: 2,\r\n                        data: [500, 600, 700, 950, 950, 1250, 1250, 1500]\r\n                    }],\r\n                    options: {\r\n                        title:{\r\n                            display:true,\r\n                            text:'Total Savings',\r\n                            fontSize:20,\r\n                            fontColor: 'white'\r\n                        },\r\n                        legend:{\r\n                            labels: {\r\n                                fontColor: 'white'\r\n                            },\r\n                            display:false,\r\n                            position:'right'\r\n                        },                       \r\n                    }                        \r\n                    }                                    \r\n            },            \r\n        }\r\n\r\n        this.dataset = [];\r\n        this.options = null;\r\n    }\r\n\r\n    componentWillMount() {\r\n        \r\n        if (this.props.dataset === \"one\") {\r\n            this.dataset = this.state.data.one;\r\n            this.options = this.state.data.one.options;\r\n        } else if (this.props.dataset === 'two') {\r\n            this.dataset = this.state.data.two;\r\n            this.options = this.state.data.two.options;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        // this.setState({\r\n        //     data: {\r\n        //         one: {\r\n        //             datasets: {\r\n        //                 data: this.dataset\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // })\r\n        // console.log(this.state.d)\r\n    }\r\n\r\n    render() {\r\n        let icon;\r\n        if (this.props.icon == null) {\r\n            icon = null;\r\n        } else {\r\n            icon = <IconCard icon={this.props.icon} />;\r\n        }\r\n\r\n        return(\r\n            \r\n            <div id=\"line-chart\">\r\n                {icon}\r\n                <Line\r\n                    data={this.dataset}\r\n                    options={this.options}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LineChart;","import {Pie} from 'react-chartjs-2';\r\nimport React from 'react';\r\n\r\nclass PieChart extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                labels: [\r\n                    'One',\r\n                    'Two',\r\n                    'Three',\r\n                    'Four'\r\n                ],\r\n                datasets: [{\r\n                    data: [205, 50, 65, 115],\r\n                    backgroundColor: [\r\n                    'rgba(92, 38, 134, 1)',\r\n                    '#36A2EB',\r\n                    '#FFCE56',\r\n                    'rgba(255,22,144,1)'\r\n                    ],\r\n                    hoverBackgroundColor: [\r\n                    'rgba(92, 38, 134, 1)',\r\n                    '#36A2EB',\r\n                    '#FFCE56',\r\n                    'rgba(255,22,144,1)'\r\n                    ]\r\n                }]\r\n            },\r\n            // options: {\r\n            //     title:{\r\n            //         display:true,\r\n            //         text:'Total Available Funds',\r\n            //         fontSize:20,\r\n            //         fontColor: 'white'\r\n            //     },\r\n            //     legend:{\r\n            //         labels: {\r\n            //             fontColor: 'white'\r\n            //         },\r\n            //         display:true,\r\n            //         position:'right'\r\n            //     },\r\n               \r\n            // }\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div id=\"pie-chart\">\r\n                <Pie\r\n                    data={this.state.data}\r\n                    options={this.state.options}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PieChart;","import {Radar} from 'react-chartjs-2';\r\nimport React from 'react';\r\nimport IconCard from '../IconCard/IconCard';\r\n\r\nclass RadarChart extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n                datasets: [\r\n                    {\r\n                    label: 'First dataset',\r\n                    backgroundColor: 'rgba(0, 0, 235, 0.2)',\r\n                    borderColor: 'rgba(92, 38, 134, 1)',\r\n                    pointBackgroundColor: 'rgba(92, 38, 134, 0.2)',\r\n                    pointBorderColor: 'white',\r\n                    pointHoverBackgroundColor: '#fff',\r\n                    pointHoverBorderColor: 'rgba(179,181,198,1)',\r\n                    data: [65, 59, 90, 81, 56, 55, 40]\r\n                    },\r\n                    {\r\n                    label: 'Second dataset',\r\n                    backgroundColor: 'rgba(255,99,132,0.2)',\r\n                    borderColor: 'rgba(255,22,144,1)',\r\n                    pointBackgroundColor: 'rgba(255,22,144,1)',\r\n                    pointBorderColor: '#fff',\r\n                    pointHoverBackgroundColor: '#fff',\r\n                    pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n                    data: [28, 48, 40, 19, 96, 27, 100]\r\n                    },\r\n                ]},\r\n            \r\n            options: {\r\n                scale: {\r\n                    gridLines: {\r\n                        // lineWidth: 2,\r\n                        color: 'white'\r\n                    },\r\n                    labels:{\r\n                    fontColor: 'white'\r\n                    }\r\n                },\r\n                \r\n                legend: {\r\n                    labels: {\r\n                        fontColor: 'white'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div id=\"radar-chart\">\r\n                <IconCard icon={this.props.icon}/>\r\n                <Radar data={this.state.data} options={this.state.options}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RadarChart;","import {Scatter} from 'react-chartjs-2';\r\nimport React from 'react';\r\n\r\nclass ScatterPlot extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data:  {\r\n                labels: ['Scatter'],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(75,192,192,0.4)',\r\n                    pointBorderColor: 'rgba(75,192,192,1)',\r\n                    pointBackgroundColor: '#fff',\r\n                    pointBorderWidth: 1,\r\n                    pointHoverRadius: 5,\r\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                    pointHoverBorderWidth: 2,\r\n                    pointRadius: 1,\r\n                    pointHitRadius: 10,\r\n                    data: [\r\n                      { x: 65, y: 75 },\r\n                      { x: 59, y: 49 },\r\n                      { x: 80, y: 90 },\r\n                      { x: 81, y: 29 },\r\n                      { x: 56, y: 36 },\r\n                      { x: 55, y: 25 },\r\n                      { x: 40, y: 18 },\r\n                    ]\r\n                  }\r\n                ]\r\n              },\r\n            // options: {\r\n            //     title:{\r\n            //         display:true,\r\n            //         text:'Total Available Funds',\r\n            //         fontSize:20,\r\n            //         fontColor: 'white'\r\n            //     },\r\n            //     legend:{\r\n            //         labels: {\r\n            //             fontColor: 'white'\r\n            //         },\r\n            //         display:true,\r\n            //         position:'right'\r\n            //     },\r\n               \r\n            // }\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div id=\"scatter\">\r\n                <Scatter\r\n                    data={this.state.data}\r\n                    options={this.state.options}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ScatterPlot;","import React from 'react';\r\nimport '../NumberHeader/number-panel.css';\r\nimport IconCard from '../IconCard/IconCard';\r\nimport './number-panel.css'\r\n\r\nclass NumberPanel extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let type = this.props.type;\r\n        let title;\r\n\r\n        if (type === 'savings'){\r\n            title = 'Projected Year-End Savings ($)'\r\n        } else if (type === 'dueDate') {\r\n            title = 'Days Until Credit Card Payment:'\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <IconCard icon={this.props.icon} />\r\n                <h5 id='num-panel-title'>{title}</h5>\r\n                <h1 id='big-number'>{this.props.number}</h1>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NumberPanel;","import {Bar} from 'react-chartjs-2';\r\nimport React from 'react';\r\nimport IconCard from '../IconCard/IconCard'\r\n\r\nclass BarChart extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'rgba(255,99,132,0.2)',\r\n                    borderColor: 'rgba(255,99,132,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                    hoverBorderColor: 'rgba(255,99,132,1)',\r\n                    data: [65, 59, 80, 81, 56, 55, 53]\r\n                  }\r\n                ]\r\n              },\r\n            options: {\r\n                title:{\r\n                    display:true,\r\n                    text:'Monthly Expenditures',\r\n                    fontSize:20,\r\n                    fontColor: 'white'\r\n                },\r\n                legend:{\r\n                    labels: {\r\n                        fontColor: 'white'\r\n                    },\r\n                    display:false,\r\n                    position:'right'\r\n                },                                               \r\n            },\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div id=\"radar-chart\">\r\n                <IconCard icon={this.props.icon}/>\r\n                <Bar\r\n                    data={this.state.data}\r\n                    options={this.state.options}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BarChart;","import {Doughnut} from 'react-chartjs-2';\r\nimport React from 'react';\r\nimport data from '../../server/data';\r\n\r\nclass DoughnutChart extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                labels: [\r\n                    'Entertainment',\r\n                    'Shopping',\r\n                    'Groceries',\r\n                    'Bills',\r\n                    'Rent',\r\n                    'Fast Food'\r\n                ],\r\n                datasets: [{\r\n                    data: data,\r\n                    backgroundColor: [\r\n                    'rgba(92, 38, 134, 1)',\r\n                    '#36A2EB',\r\n                    '#FFCE56',\r\n                    'rgba(255,22,144,1)',\r\n                    'red',\r\n                    '#0D0221'\r\n                    ],\r\n                    hoverBackgroundColor: [\r\n                    'rgba(92, 38, 134, 1)',\r\n                    '#36A2EB',\r\n                    '#FFCE56',\r\n                    'rgba(255,22,144,1)',\r\n                    'red',\r\n                    '#0D0221'\r\n                    ]\r\n                }]\r\n            },\r\n            options: {\r\n                title:{\r\n                    display:true,\r\n                    text:this.props.title,\r\n                    fontSize:20,\r\n                    fontColor: 'white'\r\n                },\r\n                legend:{\r\n                    position: 'right',\r\n                    labels: {\r\n                        fontColor: 'white'\r\n                    },\r\n            //         display:true,\r\n            //         position:'right'\r\n                },\r\n               \r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div id=\"donut-chart\">\r\n                <Doughnut\r\n                    data={this.state.data}\r\n                    options={this.state.options}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DoughnutChart;","import React from 'react';\r\nimport './panel.css';\r\nimport LineChart from '../LineChart/LineChart';\r\nimport RadarChart from '../RadarChart/RadarChart';\r\nimport PieChart from '../PieChart/PieChart';\r\nimport ScatterPlot from '../ScatterPlot/ScatterPlot';\r\nimport NumberPanel from '../NumberPanel/NumberPanel';\r\nimport BarChart from '../BarChart/BarChart';\r\nimport DoughnutChart from '../DoughnutChart/DoughnutChart';\r\n\r\nclass Panel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        switch(this.props.type) {\r\n            case 'line':\r\n        this.setState({chart: <LineChart dataset={this.props.dataset} icon={this.props.icon}/>});\r\n                break;\r\n            case 'radar':\r\n                this.setState({chart: <NumberPanel number={this.props.number} icon={this.props.icon} type={this.props.numType}/>});\r\n                break;\r\n            case 'pie':\r\n                this.setState({chart: <PieChart icon={this.props.icon}/>});\r\n                break;\r\n            case 'bar':\r\n                this.setState({chart: <BarChart icon={this.props.icon}/>});\r\n                break;\r\n            case 'scatter':\r\n                this.setState({chart: <ScatterPlot icon={this.props.icon}/>});\r\n                break;\r\n            case 'number':\r\n                this.setState({chart: <NumberPanel number={this.props.number} icon={this.props.icon} type={this.props.numType}/>});\r\n                break;\r\n            case 'doughnut':\r\n                this.setState({chart: <DoughnutChart number={this.props.number} icon={this.props.icon} title={this.props.title} />})\r\n            }\r\n        }\r\n\r\n    render() {\r\n        return (\r\n            <div className='card'>\r\n                <div className='card-body'>\r\n                    <div className='card-text'>\r\n                        {this.state.chart}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Panel;","import React from 'react';\r\nimport './number-panel.css';\r\n\r\nclass NumberHeader extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h3>Total Savings:</h3>\r\n                <h1 id='big-number'>${this.props.number} <span style={{'color':'gray'}}>/$5500</span> </h1>\r\n                <div className='progress'>\r\n                    <div className='progress-bar progress-bar-striped progress-bar-animated bg-success' \r\n                         role='progressbar'\r\n                         style={{\"width\": (parseInt(this.props.number)/5500)*100 + \"%\"}} //TODO: let user enter savings goal\r\n                         >\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NumberHeader;","import React from 'react';\r\nimport Panel from '../Panel/Panel';\r\nimport NumberPanel from '../NumberHeader/NumberHeader';\r\nimport './main-panel.css';\r\n\r\n\r\nclass MainPanel extends React.Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='main-panel'>\r\n                <div className=''>\r\n                \r\n                    {/* <div className='row' > */}\r\n                        <div className='col-sm'>\r\n                            <NumberPanel number='1500' />\r\n                        </div>\r\n                    {/* </div> */}\r\n\r\n                    <div className='row' id='big-panels'>\r\n                        <div className='col-md big-panel'>\r\n                            <Panel title='Spending Breakdown' type='doughnut'/>\r\n                        </div>                \r\n                        <div className='col-md big-panel'>\r\n                            <Panel type='line' dataset='two' />\r\n                        </div>\r\n                                         \r\n                    </div>\r\n\r\n                    <div  className='row' id='small-panels'>\r\n                        <div className='col-md' >\r\n                            <Panel type='line' icon={0} dataset='one' />\r\n                        </div>\r\n                        <div className='col-md'>\r\n                            <Panel type='number' number={3800} icon={4} numType={'savings'}/>   \r\n                        </div>\r\n                        <div className='col-md'>\r\n                            <Panel type='number' number={5} icon={2} numType={'dueDate'}/>   \r\n                        </div>   \r\n                        <div className='col-md'>\r\n                            <Panel type='bar' icon={1}/>   \r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainPanel;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport MainPanel from './components/MainPanel/MainPanel';\nimport { Route } from 'react-router-dom';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">       \n      <MainPanel />\n      {/* <Alerts /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter >\n        <App />\n    </BrowserRouter>,\n     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}